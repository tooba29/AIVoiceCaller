# AI Voice Caller - Technical Documentation

## Project Overview
AI Voice Caller is a full-stack SaaS web application that enables users to create and manage AI-powered voice calling campaigns. The application integrates Twilio for outbound calls and ElevenLabs for real-time voice generation, providing a powerful platform for automated voice interactions.

## Technology Stack
- Frontend: React + TypeScript + Vite
- UI Framework: Tailwind CSS + shadcn/ui components
- State Management: TanStack Query (React Query)
- Backend: Express.js + TypeScript
- Storage: In-memory storage with TypeScript interfaces (can be extended to persistent storage)
- APIs: Twilio (calls), ElevenLabs (voice generation)
- WebSocket: For real-time voice streaming and call monitoring

## Core Features

### 1. Campaign Management
- Create, edit, and manage voice campaigns
- Upload knowledge base PDFs for AI context
- Configure AI prompts and system personas
- Monitor active campaigns in real-time
- View campaign analytics and statistics

### 2. Voice Management
- Select from pre-made ElevenLabs voices
- Clone voices by uploading voice samples
- Preview voices before selection
- Customize voice settings (stability, similarity boost, style)

### 3. Lead Management
- Upload leads via CSV (columns: first_name, last_name, contact_no)
- View and manage lead status
- Track call progress and outcomes
- Real-time call monitoring

### 4. Analytics Dashboard
- Real-time campaign statistics
- Success rate tracking
- Call duration analytics
- Campaign performance metrics

## API Endpoints

### Campaign Endpoints
```typescript
POST /api/campaigns/initialize
- Create new campaign
- Body: { name: string, type: 'new' | 'existing' }

POST /api/campaigns/select
- Select existing campaign
- Body: { campaignId: number }

GET /api/campaigns
- Get all campaigns

PUT /api/campaigns/:id
- Update campaign
- Body: Campaign partial object

DELETE /api/campaigns/:id
- Delete campaign
```

### Voice Endpoints
```typescript
GET /api/voices
- Get available ElevenLabs voices

POST /api/voices/clone
- Clone voice from sample
- Body: FormData with audio file

POST /api/voices/preview
- Preview voice sample
- Body: { voiceId: string }
```

### Knowledge Base Endpoints
```typescript
POST /api/knowledge-base/upload
- Upload PDF for campaign
- Body: FormData with PDF file

GET /api/knowledge-base
- Get knowledge base files

DELETE /api/knowledge-base/:id
- Delete knowledge base file
```

### Call Management Endpoints
```typescript
POST /api/calls/test
- Make test call
- Body: { phoneNumber: string, campaignId: number, firstName?: string }

POST /api/campaigns/start
- Start campaign
- Body: { campaignId: number }

POST /api/campaigns/pause
- Pause active campaign
- Body: { campaignId: number }

GET /api/calls/logs
- Get call logs
```

## WebSocket Integration

### ElevenLabs WebSocket
- Endpoint: wss://api.elevenlabs.io/v1/text-to-speech/{voice_id}/stream-input
- Used for real-time voice generation
- Handles bi-directional audio streaming
- Manages conversation state

### Call Flow
1. Campaign initiated
2. Twilio makes outbound call
3. WebSocket connection established
4. Real-time voice generation and streaming
5. Call monitoring and logging
6. Analytics update

## Data Models

### Campaign
```typescript
interface Campaign {
  id: number;
  name: string;
  firstPrompt: string;
  systemPersona: string;
  selectedVoiceId?: string;
  status: string;
  totalLeads: number;
  completedCalls: number;
  successfulCalls: number;
  failedCalls: number;
  createdAt: string;
}
```

### Voice
```typescript
interface Voice {
  id: string;
  name: string;
  description: string;
  isCloned: boolean;
  sampleUrl?: string;
  settings?: {
    stability: number;
    similarity_boost: number;
    style: number;
    use_speaker_boost: boolean;
  };
  category?: 'premade' | 'cloned' | 'generated';
}
```

### Lead
```typescript
interface Lead {
  id: number;
  campaignId: number;
  firstName: string;
  lastName: string;
  contactNo: string;
  status: string;
  callDuration?: number;
  createdAt: string;
}
```
- A shared/schema.ts file contains TypeScript interfaces and data models shared between the frontend and backend, ensuring type safety across the full stack.

## Security Considerations
- API key management for Twilio and ElevenLabs
- Secure file uploads with size and type validation
- Rate limiting on API endpoints
- WebSocket connection security
- Input validation and sanitization

## UI Components
- Modern, responsive design using Tailwind CSS
- Real-time updates using React Query
- Interactive voice selection interface
- Campaign monitoring dashboard
- File upload with drag-and-drop
- Toast notifications for user feedback

## Error Handling
- Comprehensive error handling for API calls
- WebSocket connection error recovery
- File upload validation
- User-friendly error messages
- Automatic retry mechanisms

## Performance Optimizations
- Efficient state management with React Query
- Optimized file uploads
- WebSocket connection pooling
- Caching of voice samples
- Lazy loading of components

## Development Setup
1. Install dependencies: `npm install`
2. Set up environment variables:
   - TWILIO_ACCOUNT_SID
   - TWILIO_AUTH_TOKEN
   - ELEVENLABS_API_KEY
3. Start development server: `npm run dev`
4. Build for production: `npm run build`

## Deployment
- Supports deployment on various platforms
- Environment variable configuration
- Static asset optimization
- API endpoint configuration
- WebSocket server setup

This documentation provides a technical overview of the AI Voice Caller project. For detailed implementation specifics, refer to the source code and comments within each component.